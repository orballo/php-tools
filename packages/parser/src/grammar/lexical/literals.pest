LITERAL = _{
    DECIMAL_LITERAL
  | OCTAL_LITERAL
  | HEXADECIMAL_LITERAL
  | BINARY_LITERAL
  | FLOATING_LITERAL
  | FRACTIONAL_LITERAL
  | SINGLE_QUOTED_STRING_LITERAL
  | DOUBLE_QUOTED_STRING_LITERAL
  | HEREDOC_STRING_LITERAL
  | NOWDOC_STRING_LITERAL
}

// Integer Literals

DECIMAL_LITERAL     = @{ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
OCTAL_LITERAL       = @{ "0" ~ ASCII_OCT_DIGIT+ }
HEXADECIMAL_LITERAL = @{ "0" ~ ^"x" ~ ASCII_HEX_DIGIT+ }
BINARY_LITERAL      = @{ "0" ~ ^"b" ~ ASCII_BIN_DIGIT+ }

// Floating Literals

FLOATING_LITERAL   = @{ (FRACTIONAL_LITERAL ~ EXPONENT_PART?) | (ASCII_DIGIT+ ~ EXPONENT_PART) }
FRACTIONAL_LITERAL = @{ (ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+) | (ASCII_DIGIT+ ~ ".") }
EXPONENT_PART      =  { ^"e" ~ SIGN? ~ ASCII_DIGIT+ }
SIGN               =  { "+" | "-" }

// String Literals

SINGLE_QUOTED_STRING_LITERAL  = @{ BINARY_PREFIX? ~ "'" ~ SINGLE_QUOTED_CHARACTER* ~ "'" }
SINGLE_QUOTED_CHARACTER       =  { SINGLE_QUOTED_ESCAPE_SEQUENCE | !("'" | "\\") ~ ANY }
SINGLE_QUOTED_ESCAPE_SEQUENCE =  { "\\'" | "\\\\" }
BINARY_PREFIX                 =  { ^"b" }

DOUBLE_QUOTED_STRING_LITERAL              = @{ BINARY_PREFIX? ~ "\"" ~ DOUBLE_QUOTED_CHARACTER* ~ "\"" }
DOUBLE_QUOTED_CHARACTER                   =  {
    DOUBLE_QUOTED_ESCAPE_SEQUENCE
  | !("\"" | "\\") ~ ANY
  | "\\" ~ !("\"" | "\\" | "$" | "e" | "f" | "n" | "r" | "t" | "v" | ^"x" | ASCII_OCT_DIGIT) ~ ANY
}
DOUBLE_QUOTED_ESCAPE_SEQUENCE             =  {
    DOUBLE_QUOTED_SIMPLE_ESCAPE_SEQUENCE
  | DOUBLE_QUOTED_OCTAL_ESCAPE_SEQUENCE
  | DOUBLE_QUOTED_HEXADECIMAL_ESCAPE_SEQUENCE
  | DOUBLE_QUOTED_UNICODE_ESCAPE_SEQUENCE
}
DOUBLE_QUOTED_SIMPLE_ESCAPE_SEQUENCE      =  { "\\\"" | "\\\\" | "\\$" | "\\e" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v" }
DOUBLE_QUOTED_OCTAL_ESCAPE_SEQUENCE       =  { "\\" ~ ASCII_OCT_DIGIT{1, 3} }
DOUBLE_QUOTED_HEXADECIMAL_ESCAPE_SEQUENCE =  { "\\" ~ ^"x" ~ ASCII_HEX_DIGIT{1, 2} }
DOUBLE_QUOTED_UNICODE_ESCAPE_SEQUENCE     =  { "\\u" ~ "{" ~ ASCII_HEX_DIGIT+ ~ "}" }
// STRING_VARIABLE                           =  { VARIABLE_NAME ~ OFFSET_OR_PROPERTY? | "{$" ~ EXPRESSION ~ "}" }
// OFFSET_OR_PROPERTY                        =  { OFFSET_IN_STRING | PROPERTY_IN_STRING }
// OFFSET_IN_STRING                          =  { "[" ~ (NAME | VARIABLE_NAME | INTEGER_LITERAL) ~ "]" }
// PROPERTY_IN_STRING                        =  { "->" ~ NAME }

HEREDOC_STRING_LITERAL         = @{ BINARY_PREFIX? ~ "<<<" ~ HEREDOC_START_IDENTIFIER ~ NEWLINE ~ HEREDOC_BODY? ~ HEREDOC_END_IDENTIFIER ~ ";"? ~ NEWLINE }
HEREDOC_START_IDENTIFIER       =  { NAME | ("\"") ~ NAME ~ ("\"") }
HEREDOC_END_IDENTIFIER         =  { NAME }
HEREDOC_BODY                   =  { HEREDOC_CHAR* ~ NEWLINE }
HEREDOC_CHAR                   =  {
    HEREDOC_ESCAPE_SEQUENCE
  | !"\\" ~ ANY
  | "\\" ~ !("\\" | "$" | "e" | "f" | "n" | "r" | "t" | "v" | ^"x" | ASCII_OCT_DIGIT) ~ ANY
}
HEREDOC_ESCAPE_SEQUENCE        =  {
    HEREDOC_SIMPLE_ESCAPE_SEQUENCE
  | DOUBLE_QUOTED_OCTAL_ESCAPE_SEQUENCE
  | DOUBLE_QUOTED_HEXADECIMAL_ESCAPE_SEQUENCE
  | DOUBLE_QUOTED_UNICODE_ESCAPE_SEQUENCE
}
HEREDOC_SIMPLE_ESCAPE_SEQUENCE =  { "\\\\" | "\\$" | "\\e" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v" }

NOWDOC_STRING_LITERAL = @{ BINARY_PREFIX? ~ "<<<" ~ "'" ~ NAME ~ "'" ~ NEWLINE ~ HEREDOC_BODY? ~ NAME ~ ";"? ~ NEWLINE }
